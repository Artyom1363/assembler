     1                                      section .data ; сегмент инициализированных переменных
     2 00000000 456E746572206D6174-     getMatr db "Enter matrix 6x4: ", 10
     2 00000009 726978203678343A20-
     2 00000012 0A                 
     3                                  lenGetMatr equ $-getMatr
     4                                  
     5 00000013 4E756D626572206F66-     outMes db "Number of string with maxim sum of positive numbers: "
     5 0000001C 20737472696E672077-
     5 00000025 697468206D6178696D-
     5 0000002E 2073756D206F662070-
     5 00000037 6F736974697665206E-
     5 00000040 756D626572733A20   
     6                                  lenOutMes equ $-outMes
     7                                  
     8 00000048 53756D206F6620706F-     outMesSum  db "Sum of positive numbers: "
     8 00000051 736974697665206E75-
     8 0000005A 6D626572733A20     
     9                                  lenOutMesSum equ $-outMesSum
    10                                  
    11 00000061 6572726F7220776869-     errorGetElem db "error while getting input", 10
    11 0000006A 6C652067657474696E-
    11 00000073 6720696E7075740A   
    12                                  lenErrorGetElem equ $-errorGetElem
    13                                  
    14                                      section .bss ; сегмент неинициализированных переменных
    15                                  
    16 00000000 <res 0000000A>          InBuf resb 10 ; буфер для вводимой строки
    17                                  lenIn equ $-InBuf
    18 0000000A <res 0000000A>          OutBuf resb 10
    19 00000014 <res 00000030>          matr resw 24
    20 00000044 <res 00000002>          bestQuantity resw 1
    21 00000046 <res 00000002>          numberOfBest resw 1
    22                                  
    23                                      section .text
    24                                      global  _start
    25                                  _start:
    26                                      ;write message
    27 00000000 B804000000                  mov eax, 4
    28 00000005 BB01000000                  mov ebx, 1
    29 0000000A B9[00000000]                mov ecx, getMatr 
    30 0000000F BA13000000                  mov edx, lenGetMatr
    31 00000014 CD80                        int 80h
    32                                  
    33 00000016 B918000000                  mov ecx, 24
    34 0000001B BB00000000                  mov ebx, 0
    35                                  
    36                                  cycle_read:
    37 00000020 51                          push ecx
    38 00000021 53                          push ebx
    39 00000022 B803000000                  mov eax, 3
    40 00000027 BB00000000                  mov ebx, 0
    41 0000002C B9[00000000]                mov ecx, InBuf
    42 00000031 BA0A000000                  mov edx, lenIn
    43 00000036 CD80                        int 80h
    44                                  
    45                                      ; convert number to int 
    46 00000038 BE[00000000]                mov esi, InBuf
    47 0000003D E8(00000000)                call StrToInt
    48 00000042 83FB00                      cmp ebx, 0
    49 00000045 0F8501010000                jne errorMessage
    50 0000004B 5B                          pop ebx
    51 0000004C 668983[14000000]            mov [matr + ebx], ax
    52 00000053 59                          pop ecx
    53 00000054 83C302                      add ebx, 2
    54 00000057 E2C7                        loop cycle_read
    55                                  
    56                                  
    57                                  
    58                                  ;logic
    59                                  ; ax - sum, bx - number
    60 00000059 B906000000                  mov ecx, 6
    61 0000005E BB00000000                  mov ebx, 0
    62                                  
    63                                  loop_i:
    64 00000063 51                          push ecx
    65 00000064 B800000000                  mov eax, 0
    66 00000069 B904000000                  mov ecx, 4
    67                                  
    68                                  loop_j:
    69 0000006E 66BA0000                    mov dx, 0   ; only to compare
    70 00000072 663993[14000000]            cmp [matr + ebx], dx
    71 00000079 7C06                        jl skipAdding
    72 0000007B 0383[14000000]              add eax, [matr + ebx]
    73                                  skipAdding:
    74 00000081 83C302                      add ebx, 2
    75 00000084 E2E8                        loop loop_j
    76                                  
    77 00000086 59                          pop ecx
    78 00000087 3B05[44000000]              cmp eax, [bestQuantity]
    79 0000008D 7E12                        jle skipUpdateMax
    80 0000008F BA07000000                  mov edx, 7
    81 00000094 29CA                        sub edx, ecx
    82                                      ; dx have index of optimal
    83 00000096 A3[44000000]                mov [bestQuantity], eax
    84 0000009B 8915[46000000]              mov [numberOfBest], edx
    85                                  
    86                                  skipUpdateMax:
    87 000000A1 E2C0                        loop loop_i
    88                                  
    89 000000A3 EB35                        jmp printNumberOfBestString
    90                                  
    91                                  
    92                                  printMatrix:
    93 000000A5 B918000000                  mov ecx, 24
    94 000000AA BB00000000                  mov ebx, 0
    95                                  cycle_write:
    96 000000AF 51                          push ecx
    97                                      ;convert elem of matr to string
    98 000000B0 BE[0A000000]                mov esi, OutBuf
    99 000000B5 668B83[14000000]            mov ax, [matr + ebx]
   100 000000BC 83C302                      add ebx, 2
   101 000000BF 53                          push ebx
   102 000000C0 98                          cwde
   103 000000C1 E8(55000000)                call IntToStr
   104                                  
   105                                      ;print output 
   106 000000C6 89F1                        mov ecx, esi
   107 000000C8 89C2                        mov edx, eax
   108 000000CA B804000000                  mov eax, 4
   109 000000CF BB01000000                  mov ebx, 1
   110 000000D4 CD80                        int 80h
   111                                      
   112 000000D6 5B                          pop ebx
   113 000000D7 59                          pop ecx
   114 000000D8 E2D5                        loop cycle_write
   115                                      
   116                                  
   117                                  printNumberOfBestString:
   118                                  
   119                                      ;write message
   120 000000DA B804000000                  mov eax, 4
   121 000000DF BB01000000                  mov ebx, 1
   122 000000E4 B9[13000000]                mov ecx, outMes 
   123 000000E9 BA35000000                  mov edx, lenOutMes
   124 000000EE CD80                        int 80h
   125                                  
   126                                      ;convert elem of matr to string
   127 000000F0 BE[0A000000]                mov esi, OutBuf
   128 000000F5 66A1[46000000]              mov ax, [numberOfBest]
   129 000000FB 98                          cwde
   130 000000FC E8(55000000)                call IntToStr
   131                                  
   132                                      ;print output 
   133 00000101 89F1                        mov ecx, esi
   134 00000103 89C2                        mov edx, eax
   135 00000105 B804000000                  mov eax, 4
   136 0000010A BB01000000                  mov ebx, 1
   137 0000010F CD80                        int 80h
   138                                      
   139 00000111 EB00                        jmp printSumOfBestString
   140                                  
   141                                  
   142                                  printSumOfBestString:
   143                                  
   144                                      ;write message
   145 00000113 B804000000                  mov eax, 4
   146 00000118 BB01000000                  mov ebx, 1
   147 0000011D B9[48000000]                mov ecx, outMesSum
   148 00000122 BA19000000                  mov edx, lenOutMesSum
   149 00000127 CD80                        int 80h
   150                                  
   151                                      ;convert elem of matr to string
   152 00000129 BE[0A000000]                mov esi, OutBuf
   153 0000012E 66A1[44000000]              mov ax, [bestQuantity]
   154 00000134 98                          cwde
   155 00000135 E8(55000000)                call IntToStr
   156                                  
   157                                      ;print output 
   158 0000013A 89F1                        mov ecx, esi
   159 0000013C 89C2                        mov edx, eax
   160 0000013E B804000000                  mov eax, 4
   161 00000143 BB01000000                  mov ebx, 1
   162 00000148 CD80                        int 80h
   163                                      
   164 0000014A EB18                        jmp exit
   165                                  
   166                                  
   167                                  errorMessage:
   168 0000014C B804000000                  mov eax, 4
   169 00000151 BB01000000                  mov ebx, 1
   170 00000156 B9[61000000]                mov ecx, errorGetElem
   171 0000015B BA1A000000                  mov edx, lenErrorGetElem
   172 00000160 CD80                        int 80h
   173 00000162 EB00                        jmp exit
   174                                  
   175                                  exit:
   176                                      ; exit
   177 00000164 B801000000                  mov eax, 1
   178 00000169 31DB                        xor ebx, ebx
   179 0000016B CD80                        int 80h
   180                                  
   181                                  %include "../int_string.asm"
     1                              <1>     section _text
     2                              <1> StrToInt:
     3 00000000 57                  <1>     push   edi
     4 00000001 B739                <1>     mov    bh, '9'
     5 00000003 B330                <1>     mov    bl, '0'
     6 00000005 56                  <1>     push   esi     ;
     7 00000006 803E2D              <1>     cmp    byte[esi], '-'
     8 00000009 7501                <1>     jne   .prod
     9 0000000B 46                  <1>     inc    esi     ;
    10 0000000C FC                  <1> .prod cld
    11 0000000D 6631FF              <1>     xor    di, di  ; 
    12 00000010 AC                  <1> .cycle: lodsb          ; ��������� ������ (�����)
    13 00000011 3C0A                <1>     cmp    al, 10  ; ���� 10, �� �� �����
    14 00000013 741F                <1>     je     .Return
    15 00000015 38D8                <1>     cmp    al, bl  ; ���������� � ����� ����
    16 00000017 722F                <1>     jb     .Error  ; "����" � ������
    17 00000019 38F8                <1>     cmp    al, bh  ; ���������� � ����� ������ 
    18 0000001B 772B                <1>     ja     .Error  ; "����" � ������
    19 0000001D 2C30                <1>     sub    al, 30h ; �������� ����� �� �������
    20 0000001F 6698                <1>     cbw            ; ��������� �� �����
    21 00000021 6650                <1>     push   ax      ; ��������� � �����
    22 00000023 66B80A00            <1>     mov    ax, 10  ; ������� 10 � AX
    23 00000027 66F7E7              <1>     mul    di      ; ��������, ��������� � DX:AX
    24 0000002A 665F                <1>     pop    di      ; � DI � ��������� �����
    25 0000002C 6601F8              <1>     add    ax, di
    26 0000002F 6689C7              <1>     mov    di, ax  ; � DI � ����������� �����        
    27 00000032 EBDC                <1>     jmp    .cycle
    28 00000034 5E                  <1> .Return: pop    esi
    29 00000035 BB00000000          <1>     mov    ebx, 0
    30 0000003A 803E2D              <1>     cmp    byte[esi], '-'
    31 0000003D 7503                <1>     jne    .J
    32 0000003F 66F7DF              <1>     neg    di
    33 00000042 6689F8              <1> .J  mov    ax, di
    34 00000045 98                  <1>     cwde
    35 00000046 EB0B                <1>     jmp    .R
    36 00000048 5E                  <1> .Error: pop    esi
    37 00000049 B800000000          <1>     mov    eax, 0
    38 0000004E BB01000000          <1>     mov    ebx, 1
    39 00000053 5F                  <1> .R       pop    edi
    40 00000054 C3                  <1>     ret
    41                              <1> IntToStr: 
    42 00000055 57                  <1>     push   edi
    43 00000056 53                  <1>     push   ebx
    44 00000057 52                  <1>     push   edx
    45 00000058 51                  <1>     push   ecx
    46 00000059 56                  <1>     push   esi
    47 0000005A C60600              <1>     mov    byte[esi],0 ; �� ����� �����
    48 0000005D 83F800              <1>     cmp    eax,0
    49 00000060 7D05                <1>     jge    .l1
    50 00000062 F7D8                <1>     neg    eax
    51 00000064 C6062D              <1>     mov    byte[esi],'-'
    52 00000067 C646060A            <1> .l1 mov    byte[esi+6],10
    53 0000006B BF05000000          <1>     mov    edi,5
    54 00000070 66BB0A00            <1>     mov    bx,10
    55 00000074 6699                <1> .again: cwd           ; ��������� ����� �� ��������
    56 00000076 66F7F3              <1>     div    bx     ; ����� ��������� �� 10
    57 00000079 80C230              <1>     add    dl,30h ; �������� �� ������� ��� �����
    58 0000007C 88143E              <1>     mov    [esi+edi],dl ; ����� ������ � ������
    59 0000007F 4F                  <1>     dec    edi    ; ��������� ��������� ��  
    60                              <1>                 ; ���������� �������
    61 00000080 6683F800            <1>     cmp    ax, 0  ; ������������� ��� �����?
    62 00000084 75EE                <1>     jne    .again
    63 00000086 B906000000          <1>     mov    ecx, 6
    64 0000008B 29F9                <1>     sub    ecx, edi ; ����� ����������+����
    65 0000008D 89C8                <1>     mov    eax,ecx
    66 0000008F 40                  <1>     inc    eax      ; ����� ����������+0�
    67 00000090 46                  <1>     inc    esi      ; ���������� ����
    68 00000091 56                  <1>     push   esi
    69 00000092 8D343E              <1>     lea    esi,[esi+edi] ; ������ ����������
    70 00000095 5F                  <1>     pop    edi
    71 00000096 F3A4                <1>     rep movsb
    72 00000098 5E                  <1>     pop    esi  
    73 00000099 59                  <1>     pop    ecx
    74 0000009A 5A                  <1>     pop    edx
    75 0000009B 5B                  <1>     pop    ebx
    76 0000009C 5F                  <1>     pop    edi
    77 0000009D C3                  <1>     ret
